package parse;

import java_cup.runtime.*;   // Library needed for Java-CUP for parsing
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java.util.*;

import source.*;
import tree.DeclNode;
import tree.ConstExp;
import tree.StatementNode;
import tree.ExpNode;
import tree.Operator;
import syms.*;

/* PL0 definition for CUP LALR(1) parser generator.
 * This module is responsible for parsing the input file in terms
 * of the tokens supplied by the lexical analyser (see PL0.flex),
 * and generating a symbol table skeleton and an abstract syntax 
 * tree for each procedure (including the main program).
 
 * Java-CUP will output a file "CUPParser.java" that contains the parser
 * for PL0. It also outputs CUPToken.java.
 * The name "CUPParser.java" is determined by the "parser" option and
 * the name "CUPToken.java" by the "symbols" option to the java_cup command 
 * line or to the corresponding ant task.
 */

parser code 
{:  /* This section provides some methods used by Java CUP during parsing.
     * They override its default methods for reporting syntax errors. */
        
    /* Retrieve the error handler to handle error messages. */
    private Errors errors = ErrorHandler.getErrorHandler();
    
    /* Override the default CUP syntax_error method with one
     * that integrates better with the compiler's error reporting. */
    @Override
    public void syntax_error(Symbol cur_token) {
        errors.error("PL0 syntax error", ((ComplexSymbol) cur_token).xleft);
    }
    /* Override the default CUP unrecovered_syntax_error method with one
     * that integrates better with the compiler's error reporting. */
    @Override
    public void unrecovered_syntax_error(Symbol cur_token) {
        errors.error("PL0 unrecovered syntax error", 
                        ((ComplexSymbol) cur_token).xleft);
    }
            
:}

action code 
{:  /* This section provides global variables and methods used in the
     * semantics actions associated with parsing rules.
     * These are the only global variables you should need. */

    /* Error handler for reporting error messages. */
    private Errors errors = ErrorHandler.getErrorHandler();
    
    /* The current symbol table scope is available globally in the parser.
     *  Its current scope corresponds to the procedure (or main program)
     *  being processed.
     */
    private Scope currentScope;

:}


/*--------------------------------------------------------------
 *--------------------- TERMINAL SYMBOLS
 *--------------------------------------------------------------
 * CUP generates a file CUPToken.java containing the Java definitions 
 * generated by from the following list of terminal symbols.
 * CUPToken.java is used to communicate with the lexical analyser. 
 * The name "CUPToken.java" is determined by the "symbols" option to java_cup
 * (specified in command line invoking java-cup or in the corresponding ant 
 * task).
 * See PL0.flex for the detailed definitions of the lexical tokens.
 */
terminal
    SEMICOLON,    /* ; */
    COLON,        /* : */
    ASSIGN,       /* := */
    GETS,         /* <- */
    PLUS,         /* + */
    MINUS,        /* - */
    TIMES,        /* * */
    DIVIDE,       /* / */
    EQUALS,       /* = */
    NEQUALS,      /* != */
    LEQUALS,      /* <= */
    GEQUALS,      /* >= */
    LESS,         /* < */
    GREATER,      /* > */
    RANGE,        /* .. */
    COMMA,        /* , */
    LPAREN,       /* ( */
    RPAREN,       /* ) */
    LBRACKET,     /* [ */
    RBRACKET,     /* ] */
    KW_BEGIN,     /* begin */
    KW_CALL,      /* call */
    KW_CONST,     /* const */
    KW_DO,        /* do */
    KW_ELSE,      /* else */
    KW_END,       /* end */
    KW_IF,        /* if */
    KW_PROCEDURE, /* procedure */
    KW_READ,      /* read */
    KW_THEN,      /* then */
    KW_TYPE,      /* type */
    KW_VAR,       /* var */
    KW_WHILE,     /* while */
    KW_WRITE,     /* write */
    ILLEGAL;      /* illegal symbol - not used in grammar */

/** The following terminal symbols have an attribute associated with them.
 */
terminal String  IDENTIFIER;   /* identifier */
terminal Integer NUMBER;       /* number */

/**-------------------------------------------------------------
 *------------------ NONTERMINAL SYMBOLS
 *--------------------------------------------------------------
 * Many nonterminals (but not all) have an attribute type associated 
 * with them. This must be a Java class (subclass of Object, e.g., 
 * Integer rather than int). Generic types are allowed.
 * This gives the type of the special attribute RESULT in the grammar 
 * rules in which the nonterminal appears on the left side of a grammar
 * rule, and the type of the attribute corresponding to the label 
 * attached to occurrences of the nonterminal on the right side of a rule.
 *
 * The attributes are used to construct the symbol table for the
 * declaration parts and the abstract syntax tree for the bodies of
 * procedures and the main program.
 */
non terminal DeclNode.ProcedureNode Program;
non terminal StatementNode.BlockNode   Block;
non terminal DeclNode.DeclListNode DeclarationList;
non terminal                  Declaration;
non terminal                  ConstDefSeq, 
                              ConstDef;
non terminal ConstExp         Constant;
non terminal                  TypeDefSeq, 
                              TypeDef;
non terminal Type             Type,
                              TypeIdentifier;
non terminal                  VarDeclSeq, 
                              VarDecl;
non terminal DeclNode.ProcedureNode  ProcedureDef;
non terminal SymEntry.ProcedureEntry ProcedureHead;
non terminal List<SymEntry.ParamEntry> FormalParamList;
non terminal SymEntry.ParamEntry FormalParam;
non terminal List<ExpNode>  ActualParamList;
non terminal List<ExpNode>  ParamList;
non terminal List<StatementNode> StatementList;
non terminal StatementNode    Statement,
                              CompoundStatement;
non terminal ExpNode          Condition,
                              RelCondition,
                              Exp,
                              Term,
                              Factor;
non terminal Operator         Relation,
                              AddOp,
                              MulOp,
                              UnaryOperator;
non terminal ExpNode          LValue;
non terminal ExpNode          OptCond,
                              OptLval;
non terminal ExpNode.ActualParamNode ActualParam;


/**-------------------------------------------------------------
 *------------------------ GRAMMAR RULES
 *--------------------------------------------------------------
 * Grammar productions have actions associated with them, which are
 * executed after recognising (part of) the right side of the production.
 *  
 * The action is Java code contained between '{:' and ':}'
 * It is allowed to reference the values of attributes of symbols on 
 * the right side (the name of these attributes is the name after the 
 * ':' following a symbol, e.g., in the rule for Program the attribute 
 * associated with Block is 'block'), and assignments to the attribute of 
 * the left side nonterminal (which is always referred to as 'RESULT').
 *
 * Be careful to get the syntax of the '{:' and ':}' correct and to
 * make sure they match up, otherwise the error messages get very
 * confusing. Also don't forget the ";" at the end of a production.
 * 
 * To allow the locations of errors in the input source program to be
 * reported, each attribute, such as "id" associated with IDENTIFIER
 * in the production for ConstDef, has two further attributes "idxleft" 
 * and "idxright", representing the locations (think of a location as
 * a line and column number) of the leftmost and rightmost characters 
 * of the construct in the input source program.
 * Note that the name "idxleft" is constructed from the name "id" by
 * adding "xleft" to it. 
 *
 * Java-CUP has a special non-terminal symbol 'error', which is used to 
 * allow recovery from syntax errors in the program. 
 *
 * The action code usually comes at the end of the right side of a production,
 * however, it is possible to have multiple actions, each of which is executed
 * as soon as the symbols preceding it are matched.
 * For example, for Program the first thing on the right side is an 
 * action, and hence this action is executed before the right side of
 * program (namely Block) is recognised, i.e., before any of the 
 * Program is recognised. The second action following Block is executed
 * after the whole of the Block representing the program is recognised.
 */
Program ::=  /* empty */ 
        {:
            /* This action occurs before the whole program is recognised.
             * It constructs the initial symbol table with current scope the
             * predefined scope. */
            currentScope = new SymbolTable().getPredefinedScope();
            /* Set up a dummy symbol table entry for the main program */
            SymEntry.ProcedureEntry procMain = 
                currentScope.addProcedure("<main>", ErrorHandler.NO_LOCATION);
            if(procMain  == null) {
                errors.fatal("Could not add main program to symbol table",
                        ErrorHandler.NO_LOCATION);
            }
            /* Enter the scope for the main program and save the new local
             * scope in main's symbol table entry */
            currentScope = currentScope.newScope(procMain);
        :}
     Block:block
        {: 
            /* This action is executed after the whole program
             * has been recognised */
            /* Returned result of the whole parsing phase */
            RESULT = new DeclNode.ProcedureNode(currentScope.getOwnerEntry(), block);
            /* Exit the current scope */
            currentScope = currentScope.getParent();
        :}
    | error
        {:
            /* A null result from Program will cause the compiler to
             * avoid further processing. */
            RESULT = null;
        :}
    ;

Block ::= DeclarationList:dl CompoundStatement:b
        {:
            RESULT = new StatementNode.BlockNode(bxleft, dl, b, currentScope);
        :}
    ;

DeclarationList ::= DeclarationList:dl ProcedureDef:p 
        {:
            /* Add a procedure declaration to the list of declarations */
            dl.addDeclaration(p);
            RESULT = dl;
        :}
    | DeclarationList:dl Declaration
        {:
            /* A non-procedure declaration is not added to the list
             * but added to the symbol table during its parsing. */
            RESULT = dl;
        :}
    | /* empty */
        {:
            RESULT = new DeclNode.DeclListNode();
        :}
    ;

Declaration ::= KW_CONST ConstDefSeq
    |  KW_TYPE TypeDefSeq
    |  KW_VAR  VarDeclSeq
    ;

ConstDefSeq ::= ConstDef
    |  ConstDefSeq ConstDef
    ;

ConstDef ::= IDENTIFIER:id EQUALS Constant:c SEMICOLON
        {:
            /* The attribute idxleft represents the location of the first
             * character of the IDENTIFIER token in the input stream.
             * addConstant returns null if id is already defined 
             * in the current scope */
            if(currentScope.addConstant(id, idxleft, c) == null) {
                errors.error(id + " already declared in this scope", idxleft);
            }
        :}
    |  error 
    ;

/* The rules for Constant construct a (mini) abstract syntax tree
 * for constant expressions (not to be confused with ExpNodes).
 */
Constant ::= NUMBER:n
        {: 
            RESULT = new ConstExp.NumberNode(nxleft, Predefined.INTEGER_TYPE, n);
        :}
    |  MINUS:op Constant:c
        {: 
            RESULT = new ConstExp.NegateNode(opxleft, c);
        :}
    |  IDENTIFIER:id
        {: 
            RESULT = new ConstExp.ConstIdNode(idxleft, id, currentScope);
        :}
    |  error:err
        {:
            RESULT = new ConstExp.ErrorNode(errxleft);
        :}
    ;

TypeDefSeq ::= TypeDef 
    |  TypeDefSeq TypeDef
    ;

TypeDef ::= IDENTIFIER:id EQUALS Type:type SEMICOLON
        {: 
            SymEntry.TypeEntry entry = currentScope.addType(id, idxleft, type);
            if(entry == null) {
                errors.error(id + " already declared in this scope", idxleft);
            }
        :}
    |  error 
    ;

Type ::= TypeIdentifier:type
        {: 
            RESULT = type;
        :}
    | LBRACKET:subr Constant:lo RANGE Constant:hi RBRACKET
        {:
            RESULT = new Type.SubrangeType(subrxleft, lo, hi);
        :}
    ;

TypeIdentifier ::= IDENTIFIER:id
        {: /* As the type identifier may not be defined at this point.
            * IdRefType records the id, as well as the symbol table scope
            * to look it up during type resolution in the static checker.
            */
            RESULT = new Type.IdRefType(idxleft, id, currentScope);
        :}
    | error:err
        {:
            RESULT = Type.ERROR_TYPE;
        :}
    ;

VarDeclSeq ::= VarDecl
    |  VarDeclSeq VarDecl
    ;

VarDecl ::= IDENTIFIER:id COLON TypeIdentifier:type SEMICOLON
        {: 
            // Variables are always of ReferenceType.
            if(currentScope.addVariable(id, idxleft, type) == null) {
                errors.error(id + " already declared in this scope", idxleft);
            }
        :}
    |  error
    ;
    
ProcedureDef ::= ProcedureHead:procEntry EQUALS Block:b SEMICOLON
        {:
            /* Executed after recognising the whole procedure.
             * Exit the scope created during the parsing action
             * for ProcedureHead. */
            currentScope = currentScope.getParent();
            RESULT = new DeclNode.ProcedureNode(procEntry, b);
        :}
    ;

ProcedureHead ::= KW_PROCEDURE IDENTIFIER:id
            LPAREN FormalParamList:fpl
            RPAREN
        {:
            /* Add an entry for the procedure to the current scope */
            SymEntry.ProcedureEntry procEntry = currentScope.addProcedure(id, idxleft);
            if(procEntry == null) {
                errors.error(id + " already declared in this scope", idxleft);
                /* Create a dummy symbol table entry.
                 * Note that this entry isn't added to the symbol table
                 * but the RESULT attribute of ProcedureHead must return a
                 * ProcedureEntry. */
                procEntry = new SymEntry.ProcedureEntry(id, idxleft);
                procEntry.setScope(currentScope);
            }

            // New scope where the procedure is the parent
            currentScope = currentScope.newScope(procEntry);
            Type.ProcedureType procedureType = procEntry.getType();

            List<SymEntry.ParamEntry> params = new ArrayList<SymEntry.ParamEntry>();
            for (SymEntry.ParamEntry pe : fpl) {
                SymEntry entry = currentScope.addEntry(pe);
                if (entry == null) { // check for any repeats
                    errors.error(pe.getIdent() + " repeated", pe.getLocation());
                } else {
                    params.add(pe); // add the param to the list if it is not repeated
                }
            }
            procedureType.setFormalParams(params); // change the parameters at the end

            RESULT = procEntry;
        :}
    |  KW_PROCEDURE IDENTIFIER:id error
        {:
            /* On a syntax error in a procedure head a dummy ProcedureEntry is
             * returned and a new scope created to allow the parsing of the
             * block body of the procedure to be processed in the new scope.
             */
            SymEntry.ProcedureEntry procEntry = 
                new SymEntry.ProcedureEntry(id, idxleft);
            procEntry.setScope(currentScope);
            currentScope = currentScope.newScope(procEntry);
            RESULT = procEntry;
        :}
    ;


/* To allow for the addition of procedure parameters. */
FormalParamList ::= FormalParam:fp
        {:
            RESULT = new ArrayList<SymEntry.ParamEntry>();
            RESULT.add(fp);
        :}
    | FormalParamList:fpl COMMA FormalParam:fp
        {:
            fpl.add(fp);
            RESULT = fpl;
        :}
    | /* Empty */
        {:
            RESULT = new ArrayList<SymEntry.ParamEntry>();
        :}
    ;

FormalParam ::= IDENTIFIER:id COLON TypeIdentifier:ti OptCond:oc
        {:
            // define a new param entry, not a reference type as it is not defined within the scope
            SymEntry.ParamEntry param = new SymEntry.ParamEntry(id, idxleft, ti, false, oc);
            param.setScope(currentScope);
            RESULT = param;
        :}
    | KW_VAR IDENTIFIER:id COLON TypeIdentifier:ti OptLval:olv
        {:
            // define as a reference as it is a formal parameter and defined within the local scope
            SymEntry.ParamEntry param = new SymEntry.ParamEntry(id, idxleft, ti, true, olv);
            param.setScope(currentScope);
            RESULT = param;
        :}
    ;

OptCond ::= GETS Condition:c
        {:
            RESULT = c;
        :}
    | /* Empty */
        {:
            RESULT = null;
        :}
    ;

OptLval ::= GETS LValue:lval
        {:
            RESULT = lval;
        :}
    | /* Empty */
        {:
            RESULT = null;
        :}
    ;

CompoundStatement ::= KW_BEGIN StatementList:sl KW_END
        {:
            RESULT = new StatementNode.ListNode(slxleft,sl);
        :}
    ;

StatementList ::= Statement:s
        {:
            RESULT = new ArrayList<StatementNode>();
            RESULT.add(s);
        :}
    |  StatementList:sl SEMICOLON Statement:s
        {:
            sl.add(s);
            RESULT = sl;
        :}
    ;

Statement ::= KW_WHILE Condition:c KW_DO Statement:s
        {: 
            RESULT = new StatementNode.WhileNode(cxleft, c, s);
        :}
    |  KW_IF Condition:c KW_THEN Statement:s1 KW_ELSE Statement:s2
        {: 
            RESULT = new StatementNode.IfNode(cxleft, c, s1, s2);
        :}
    |  CompoundStatement:s
        {: 
            RESULT = s; 
        :}
    | KW_READ LValue:lval
        {: 
            RESULT = new StatementNode.ReadNode(lvalxleft, lval);
        :}
    |  KW_WRITE Exp:e
        {: 
            RESULT = new StatementNode.WriteNode(exleft, e);
        :}
    |  LValue:lval ASSIGN Condition:rval
       {:
          RESULT = new StatementNode.AssignmentNode(lvalxleft, lval, rval);
       :} 
    |  KW_CALL IDENTIFIER:id LPAREN ActualParamList:pl RPAREN
        {:
            HashSet<String> paramsIds = new HashSet<String>();
            for (ExpNode p : pl) {
                ExpNode.ActualParamNode param = (ExpNode.ActualParamNode)p;
                if (paramsIds.contains(param.getId())) { // check for repeats
                    errors.error(param.getId() + " repeated", param.getLocation());
                }
                paramsIds.add(param.getId());
            }
            RESULT = new StatementNode.CallNode(idxleft, id, pl);
        :}
    |  error:e
        {:
            RESULT = new StatementNode.ErrorNode(exleft);
        :}
    ;

ActualParamList ::= ParamList:pl
        {:
            RESULT = pl;
        :}
    | /* Empty - use default */
        {:
            RESULT = new ArrayList<ExpNode>();
        :}
    ;

/* Had to split it into a ParamList to pass tests where the first parameter was empty (, param) */
ParamList ::= ActualParam:ap
        {:
            RESULT = new ArrayList<ExpNode>();
            RESULT.add(ap);
        :}
    | ParamList:apl COMMA ActualParam:ap
        {:
            apl.add(ap);
            RESULT = apl;
        :}
    ;

ActualParam ::= IDENTIFIER:id GETS Condition:cond
        {:
            RESULT = new ExpNode.ActualParamNode(idxleft, id, cond);
        :}
    ;

LValue ::= IDENTIFIER:id
        {:
            /* At this stage the identifier could be either a constant identifier or 
             * a variable identifier but which cannot be determined until static 
             * checking when the IdentifierNode will be transformed into either
             * a ConstNode or a VariableNode or detected as invalid.
             */
            RESULT = new ExpNode.IdentifierNode(idxleft, id);
        :}
    | error:e
        {:
            RESULT = new ExpNode.ErrorNode(exleft);
        :}
    ;

/* To allow for adding logical expressions. */
Condition ::= RelCondition:e
        {: 
            RESULT = e;
        :}
    ;

/* Relational operators are lower precedence than arithmetic operators. */
RelCondition ::= Exp:e 
        {:
            RESULT = e;
        :}
    |  Exp:e1 Relation:op Exp:e2
        {:
            RESULT = new ExpNode.BinaryNode(opxleft, op, e1,e2);
        :} 
    ;

Relation ::= EQUALS
        {:
            RESULT = Operator.EQUALS_OP;
        :}
    |  NEQUALS
        {:
            RESULT = Operator.NEQUALS_OP;
        :}
    |  LEQUALS
        {:
            RESULT = Operator.LEQUALS_OP;
        :}
    |  LESS
        {:
            RESULT = Operator.LESS_OP;
        :}
    |  GREATER
        {:
            RESULT = Operator.GREATER_OP;
        :}
    |  GEQUALS
        {:
            RESULT = Operator.GEQUALS_OP;
        :}
    ;

/* Expressions are structured into Exp, Term, and Factor to encode the
 * precedence of the operators in the grammar.
 */
Exp ::= Term:t
        {:
            RESULT = t;
        :}
    |  Exp:e1 AddOp:op Term:e2
        {:
            RESULT = new ExpNode.BinaryNode(opxleft, op, e1,e2);
        :}
    ;

AddOp ::= PLUS
        {:
            RESULT = Operator.ADD_OP;
        :}
    |  MINUS
        {:
            RESULT = Operator.SUB_OP;
        :}
    ;

Term ::= Factor:f
        {:
            RESULT = f;
        :}
    |  Term:e1 MulOp:op Factor:e2
        {:
            RESULT = new ExpNode.BinaryNode(opxleft, op, e1,e2);
        :}
    ;

MulOp ::= TIMES
        {:
            RESULT = Operator.MUL_OP;
        :}
    |  DIVIDE
        {:
            RESULT = Operator.DIV_OP;
        :}
    ;

Factor ::= PLUS Factor:e
        {:
            RESULT = e; 
        :}
    |  UnaryOperator:op Factor:e
        {:
            RESULT = new ExpNode.UnaryNode(opxleft, op, e);
        :}
    |  LPAREN Condition:c RPAREN
        {:
            RESULT = c;
        :}
    |  NUMBER:n
        {:
            RESULT = new ExpNode.ConstNode(nxleft, 
                    Predefined.INTEGER_TYPE, n);
        :}
    |  LValue:lval
        {:
            RESULT = lval;
        :}
    ;

UnaryOperator ::= MINUS
        {:
            RESULT = Operator.NEG_OP;
        :}
    ;



